# This workflow generates a changelog entry based on the latest tag and previous tag.
# Note:
# needs this setting: https://private-user-images.githubusercontent.com/18365890/306208533-23f43cd7-ae8e-40d4-924c-c8f9f1213123.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTA3MjExNTcsIm5iZiI6MTc1MDcyMDg1NywicGF0aCI6Ii8xODM2NTg5MC8zMDYyMDg1MzMtMjNmNDNjZDctYWU4ZS00MGQ0LTkyNGMtYzhmOWYxMjEzMTIzLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA2MjMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNjIzVDIzMjA1N1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWFlZTcyZjMwOGU4M2MzODJmMmY1ZjY4ZGQ4OGU0OWJlMzNhNDk4ZGNjMDkxNWY0Njk2ZTFiODEwOWM3MGNhYWEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.3Oh2ldo8haHZzMsmTzdE9wRAlBKjYik3TGlW4_9XINQ

name: Generate Changelog

on:
  #push:
  #  tags:
  #    - 'v*.*.*'

  workflow_call:
    inputs:
      tag:
        required: true
        type: string

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history for accurate changelog generation

      - name: Generate changelog entry
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "changelog-builder@users.noreply.github.com"
          git config --local user.name "Changelog Builder"

          git pull
          CHANGELOG_FILE="CHANGELOG.md"
          LATEST_TAG="${{ inputs.tag }}"
          PREVIOUS_TAG=$(git tag --sort=-creatordate | sed -n '2p')
          if [[ -z "$PREVIOUS_TAG" ]]; then
            PREVIOUS_TAG="0.0.1"
          fi

          CHANGELOG_BRANCH="chore/$LATEST_TAG"
          git checkout -b "$CHANGELOG_BRANCH"

          echo "Generating changelog for $LATEST_TAG (since $PREVIOUS_TAG)..."
          COMMITS=$(git log "$PREVIOUS_TAG".."$LATEST_TAG" --no-merges --pretty=format:"%s by @%an in %h")

          ADDED=""; CHANGED=""; FIXED=""; REMOVED=""; SECURITY=""
          while IFS= read -r line; do
            case "$line" in
              *feat*|*implement*) ADDED+="- $line\n" ;;
              *fix*|*bug*|*resolve*|*patch*) FIXED+="- $line\n" ;;
              *update*|*modify*|*change*|*refactor*|*chore*) CHANGED+="- $line\n" ;;
              *decommission*|*delete*|*remove*) REMOVED+="- $line\n" ;;
              *security*|*vuln*|*"patch security"*) SECURITY+="- $line\n" ;;
              *) CHANGED+="- $line\n" ;;
            esac
          done <<< "$COMMITS"

          {
            echo -e "## [$LATEST_TAG] - $(date +'%Y-%m-%d')\n"
            [[ -n "$ADDED" ]] && echo -e "### Added\n$ADDED\n"
            [[ -n "$CHANGED" ]] && echo -e "### Changed\n$CHANGED\n"
            [[ -n "$FIXED" ]] && echo -e "### Fixed\n$FIXED\n"
            [[ -n "$REMOVED" ]] && echo -e "### Removed\n$REMOVED\n"
            [[ -n "$SECURITY" ]] && echo -e "### Security\n$SECURITY\n"
          } > temp_changelog.md

          if [[ ! -f "$CHANGELOG_FILE" ]]; then
            echo -e "# Changelog\n\nAll notable changes to this project will be documented here.\n" > "$CHANGELOG_FILE"
          fi

          # Insert the new changelog entry at the top of the CHANGELOG.md
          awk 'NR==1{print; system("cat temp_changelog.md"); next} 1' "$CHANGELOG_FILE" > temp_changelog_full.md
          mv temp_changelog_full.md "$CHANGELOG_FILE"

          git add "$CHANGELOG_FILE"
          git commit -m "doc: update CHANGELOG.md for $LATEST_TAG"
          git push origin "$CHANGELOG_BRANCH"

          gh pr create \
            --title "chore: update changelog for $LATEST_TAG" \
            --body "This PR updates the changelog for release $LATEST_TAG." \
            --base main \
            --head "$CHANGELOG_BRANCH"

# Example release pipeline trigger:
#
# TAG="v0.0.1"
# git tag "$TAG" -m "Release version: $TAG"
# git push origin --tags
