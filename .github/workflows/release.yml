# This workflow automates the process of versioning, publishing a release, building and pushing a Docker image, and generating a changelog for a GitHub repository.
# It allows manual triggering with a specified version increment (major, minor, patch) and performs

name: Publish release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version increment (major, minor, patch)'
        required: true
        default: 'patch'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tagging.outputs.new_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Git User Identity
        run: |
          git config --local user.email "changelog-builder@users.noreply.github.com"
          git config --local user.name "Changelog Builder"

      - name: Fetch Latest Tag and Increment Version
        id: tagging
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          # Extract Major, Minor, Patch
          IFS='.' read -r MAJOR MINOR PATCH <<<"${LATEST_TAG//v/}"
          INCREMENT=${{ github.event.inputs.version }}
          echo "Updating : $INCREMENT version"

          case "$INCREMENT" in
            major) ((MAJOR++)); MINOR=0; PATCH=0 ;;
            minor) ((MINOR++)); PATCH=0 ;;
            patch|*) ((PATCH++)) ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "Pushing this tag: $NEW_TAG"

          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

          echo "New tag pushed: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

  publish-release:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Generate and Publish GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG="${{ needs.versioning.outputs.new_tag }}"
          PREVIOUS_TAG=$(git tag --sort=-creatordate | sed -n '2p')

          echo "Creating GitHub release for $LATEST_TAG from previous release $PREVIOUS_TAG"

          gh release create "$LATEST_TAG" \
            --title "Release $LATEST_TAG" \
            --generate-notes \
            --notes-start-tag "$PREVIOUS_TAG"

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [versioning, publish-release]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,priority=400
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=500
            type=semver,pattern={{version}},priority=700,value=${{ needs.versioning.outputs.new_tag }}
            type=sha,priority=1000

      - name: Extract last tag
        id: tag
        run: |
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          LAST_INDEX=$((${#TAGS[@]} - 1))
          echo "last_tag=${TAGS[LAST_INDEX]}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  call-generate-changelog:
    needs: [versioning, build-and-push-image]
    uses: ./.github/workflows/generate_changelog.yml
    with:
      tag: ${{ needs.versioning.outputs.new_tag }}
